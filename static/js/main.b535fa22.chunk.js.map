{"version":3,"sources":["redux/actionTypes.tsx","redux/reducer.tsx","components/AddNewTodoList.tsx","redux/actions.tsx","components/TodoHomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ADD_TODO","DELETE_TODO","TOGGLE_TODO","initialState","todoList","id","uniqueId","done","detail","toggleTodo","todo","copyData","forEach","list","addTodoList","lists","newTodo","isThereSameDataPresent","some","data","createStore","state","type","payload","filter","AddNewTodoList","dispact","useDispatch","useState","newTask","setNewTask","inputRef","useRef","document","createElement","useEffect","current","focus","className","onSubmit","event","preventDefault","length","ref","placeholder","onChange","value","target","ShowTodoList","dispatch","checkBoxOnChange","onDeleteButtonClick","useSelector","store","map","checked","bind","style","textDecoration","overflowWrap","onClick","TodoHomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b535fa22.chunk.js","sourcesContent":["const ADD_TODO = \"ADD_TODO\";\nconst UPDATE_TODO = \"UPDATE_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\nconst UPDATE_USER_DETAILS = \"UPDATE_USER_DETAILS\";\nconst TOGGLE_TODO = \"TOGGLE_TODO\";\n\nexport { ADD_TODO, UPDATE_TODO, DELETE_TODO, UPDATE_USER_DETAILS, TOGGLE_TODO };\n","import { uniqueId } from \"lodash\";\nimport { createStore } from \"redux\";\n\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from \"./actionTypes\";\n\n// Initial state of store\nconst initialState = {\n  todoList: [\n    {\n      id: uniqueId(),\n      done: false,\n      detail: \"Do home work\",\n    },\n    {\n      id: uniqueId(),\n      done: true,\n      detail: \"Learn typescript\",\n    },\n  ],\n};\n\n// Helper functions\nfunction toggleTodo(todo: any, id: number) {\n  const copyData = [...todo];\n  copyData.forEach((list) => {\n    if (list.id === id) {\n      list.done = !list.done;\n    }\n  });\n  return copyData;\n}\n\ninterface NewTodo {\n  id: string;\n  done: boolean;\n  detail: string;\n}\n\nfunction addTodoList(lists: any, newTodo: NewTodo) {\n  const isThereSameDataPresent = lists.some(\n    // is same detail present in list\n    ({ detail }: { detail: string }) => detail === newTodo.detail\n  );\n\n  let data = [...lists];\n  if (!isThereSameDataPresent) {\n    data = [...lists, newTodo];\n  }\n\n  return data;\n}\n\n// Reducer\nfunction todoReducer(\n  state = initialState,\n  { type, payload }: { type: string; payload: any }\n) {\n  switch (type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todoList: addTodoList(state.todoList, payload),\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todoList: state.todoList.filter(\n          ({ id }: { id: string }) => id !== payload\n        ),\n      };\n\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todoList: toggleTodo(state.todoList, payload),\n      };\n\n    default:\n      return state;\n  }\n}\n\n// Store\nexport default createStore(todoReducer);\n","import { useRef, useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewTodoListAction } from \"../redux/actions\";\nimport \"./component.css\";\n\nfunction AddNewTodoList() {\n  const dispact = useDispatch();\n  const [newTask, setNewTask] = useState(\"\");\n  const inputRef = useRef(document.createElement(\"input\"));\n\n  useEffect(() => {\n    // On mount get focus on input.\n    inputRef.current.focus();\n  }, []);\n\n  function onInputeChange({\n    target: { value },\n  }: {\n    target: { value: string };\n  }) {\n    setNewTask(value);\n  }\n\n  function onSubmit(event: any) {\n    event.preventDefault();\n    if (newTask.length) {      \n      // if there is string inputted then only dispatch\n      dispact(addNewTodoListAction(newTask));\n      setNewTask(\"\"); // reset value\n    }\n  }\n\n  return (\n    <form className=\"taskForm\" onSubmit={onSubmit}>\n      <input\n        className=\"formInput\"\n        ref={inputRef}\n        placeholder=\"Add new todo list...\"\n        onChange={onInputeChange}\n        value={newTask}\n      />\n    </form>\n  );\n}\n\nexport default AddNewTodoList;\n","import { uniqueId } from \"lodash\";\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from \"./actionTypes\";\n\nfunction addNewTodoListAction(detail: string) {\n  return {\n    type: ADD_TODO,\n    payload: {\n      id: uniqueId(),\n      done: false,\n      detail,\n    },\n  };\n}\n\nfunction toggleTodoAction(payload: string) {\n  return {\n    type: TOGGLE_TODO,\n    payload,\n  };\n}\n\nfunction deletTodoListAction(payload: string) {\n  return {\n    type: DELETE_TODO,\n    payload,\n  };\n}\n\nexport { addNewTodoListAction, toggleTodoAction, deletTodoListAction };\n","import { useDispatch, useSelector } from \"react-redux\";\nimport AddNewTodoList from \"./AddNewTodoList\";\nimport { toggleTodoAction, deletTodoListAction } from \"../redux/actions\";\nimport \"./component.css\";\n\nfunction ShowTodoList() {\n  const dispatch = useDispatch();\n  const todoList = useSelector((store: any) => store.todoList);\n\n  function checkBoxOnChange(id: string) {\n    dispatch(toggleTodoAction(id));\n  }\n\n  function onDeleteButtonClick(id: string) {\n    dispatch(deletTodoListAction(id));\n  }\n\n  return todoList.map((list: any) => (\n    <div key={list.id} className=\"listDiv\">\n      <input\n        type=\"checkbox\"\n        checked={list.done}\n        onChange={checkBoxOnChange.bind({}, list.id)}\n      />\n      <span\n        style={{\n          textDecoration: list.done ? \"line-through\" : \"auto\",\n          overflowWrap: \"anywhere\",\n        }}\n      >\n        {list.detail}\n      </span>\n      <div>\n        <button\n          className=\"deleteButton\"\n          onClick={onDeleteButtonClick.bind({}, list.id)}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  ));\n}\n\nfunction TodoHomePage() {\n  return (\n    <div className=\"todoListParent\">\n      <h1>Hello, welcome to your todo lists</h1>\n      <AddNewTodoList />\n      <ShowTodoList />\n    </div>\n  );\n};\n\nexport default TodoHomePage;\n","import { Provider } from \"react-redux\";\nimport \"./App.css\";\nimport store from \"./redux/reducer\";\nimport { TodoHomePage } from \"./components\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <TodoHomePage />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}